
		
	############################################################
	####解析服务器应用流程（从优化到安装服务、最终上架程序）####
	############################################################


			目录-----------------------------
				

				一、基础优化
					
					1.内核优化
					2.远程安全
					3.应用优化
					4.漏洞扫描
					5.其他优化


				二、服务安装
						
				上传安装包：

					1.	jdk-8u151-linux-x64.tar   		#java环境
					2.	apache-tomcat-7.0.82.tar.gz     #tomcat中间间
					3.	dubbo-admin-2.5.4.war	  		#dubbo管理平台
					4.	zookeeper-3.4.10.tar      		#zookeeper分发器
					5.	pcre-8.37.tar             		#此包的功能是支持地址重写rewrite功能
					6.	nginx-1.8.0.tar           		#nginx Web服务器
					7.	libmcrypt-2.5.8.tar       		#安装加密算法扩展库
					8.	php-5.6.13.tar     		  		#PHP程序处理工具（FastCGI）
					9.	redis-4.0.6.tar           		#Redis nosql程序
					10.	safe-rm-0.12.tar          		#防止误删除工具
					11. 						  		#busybox工具





				一、首先做好服务器基础优化：


					1.内核优化
					2.远程安全
					3.应用优化
					4.漏洞扫描
					5.其他优化


				1.内核优化：

						sysctl命令用来配置与显示在/proc/sys目录中的内核参数，如果想使用参数长期保存，可以通过编辑/etc/sysctl.conf文件来实现；

						对于linux内核参数调整有两种方法：

						方法一：修改/proc下内核参数文件内容，不能使用编辑器来修改内核参数文件，理由是由于内核随时可能更改这些文件中的任意一个，另外，这些内核参数文件都是虚拟文件，实际中不存在，因此不能使用编辑器进行编辑，而是使用echo命令，然后从命令行将输出重定向至 /proc 下所选定的文件中。如：将 timeout_timewait 参数设置为30秒：
					
						echo 30 > /proc/sys/net/ipv4/tcp_fin_timeout 
						参数修改后立即生效，但是重启系统后，该参数又恢复成默认值。因此，想永久更改内核参数，需要修改/etc/sysctl.conf文件
 
				    	方法二：修改/etc/sysctl.conf文件。检查sysctl.conf文件，如果已经包含需要修改的参数，则修改该参数的值，如果没有需要修改的参数，在sysctl.conf文件中添加参数。
				    
				       	net.ipv4.tcp_fin_timeout=30	保存退出后，可以重启机器使参数生效；
				    	sysctl  -p 如果想使参数马上生效，也可以执行如下命令： 


				    
				    	1.配置syn洪水攻击防护	

						sysctl -a | grep _syn
						net.ipv4.tcp_max_syn_backlog = 1024		是SYN队列的长度
						net.ipv4.tcp_syncookies = 1				tcp_syncookies是一个开关，是否打开SYN Cookie 功能，该功能可以防止部分SYN攻击。
						net.ipv4.tcp_synack_retries = 5			tcp_synack_retries和tcp_syn_retries定义SYN 的重试连接次数，将默认的参数减小来控制SYN连接次数的尽量少。
						net.ipv4.tcp_syn_retries = 5

						

						将下列命令写入到/etc/rc.d/rc.local 

						ulimit -HSn 65535
						sysctl -w net.ipv4.tcp_max_syn_backlog=2048
						sysctl -w net.ipv4.tcp_syncookies=1
						sysctl -w net.ipv4.tcp_synack_retries=2
						sysctl -w net.ipv4.tcp_syn_retries=2

						防火墙规则拒绝

						#Syn 洪水攻击(--limit 1/s 限制syn并发数每秒1次)
						iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT
						#防端口扫描
						iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j ACCEPT
						#防洪水ping
						iptables -A FORWARD -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPT



						内核相关参数优化


						echo "*	soft nofile 65536" >>  /etc/security/limits.conf
						echo "*	hard nofile 65536" >> /etc/security/limits.conf
						ulimit -a



						#kernel optimization

						grep "net.ipv4.tcp_keepalive_time = 30" /etc/sysctl.conf
						if [ $? != 0 ]
						  then
						cat > /etc/sysctl.conf<<EOF
						net.ipv4.tcp_max_tw_buckets = 6000
						net.ipv4.ip_local_port_range = 1024 65000
						net.ipv4.tcp_tw_recycle = 0
						net.ipv4.tcp_tw_reuse = 1
						net.core.somaxconn = 262144
						net.core.netdev_max_backlog = 262144
						net.ipv4.tcp_max_orphans = 262144
						net.ipv4.tcp_max_syn_backlog = 262144
						net.ipv4.tcp_synack_retries = 2
						net.ipv4.tcp_syn_retries = 1
						net.ipv4.tcp_fin_timeout = 1
						net.ipv4.tcp_keepalive_time = 30
						net.ipv4.tcp_keepalive_probes = 6
						net.ipv4.tcp_keepalive_intvl = 5
						net.ipv4.tcp_timestamps = 0
						EOF


						sed -i 's/net.bridge.bridge-nf-call-ip6tables = 0/#net.bridge.bridge-nf-call-ip6tables = 0/g' /etc/sysctl.conf
						sed -i 's/net.bridge.bridge-nf-call-iptables = 0/#net.bridge.bridge-nf-call-iptables = 0/g' /etc/sysctl.conf
						sed -i 's/net.bridge.bridge-nf-call-arptables = 0/#net.bridge.bridge-nf-call-arptables = 0/g' /etc/sysctl.conf
						fi

						sysctl -p


					   （云主机类型）关闭防火墙：systemctl stop firewalld.service


					   	3.安装基础插件与工具

					   	yum install gcc gcc-c++ ncurses-devel.x86_64 cmake.x86_64 libaio.x86_64 bison.x86_64 gcc-c++.x86_64 bind-utils wget curl curl-devel perl openssh-clients setuptool sysstat htop nethogs vim -y
						yum search rz -y
						yum install -y lrzsz.x86_64




						2.远程安全（SSHD）

						vim /etc/ssh/sshd_conf 编辑此配置文件进行修改

						1. 修改默认端口

						#Port 22

						2. 修改监听协议,只监听某个或某些网络协议

						#AddressFamily any

						AddressFamily inet

						# 3. 修改ssh只监听内网IP地址(IPV4和IPV6)

						#ListenAddress 0.0.0.0 #监听IPV4所有网络地址

						ListenAddress 103.15.135.15

						# 4. 设置密钥生命周期,定时更新密钥,并将密钥设置尽可能长

						# --->(需设置Protocol 1)

						#KeyRegenerationInterval 1h

						# 在SSH-1协议下，短命的服务器密钥将以此指令设置的时间为周期(秒)，不断重新生成。 

						# 这个机制可以尽量减小密钥丢失或者黑客攻击造成的损失。 

						# 设为 0 表示永不重新生成，默认为 3600(秒)。

						#ServerKeyBits 1024

						# 指定临时服务器密钥的长度。仅用于SSH-1。默认值是 768(位)。最小值是 512 。

						# 5. 禁止root用户远程登录

						#PermitRootLogin yes # 允许root用户登录

						PermitRootLogin no # 禁止root用户远程登录

						# 6. DNS查询关闭

						#UseDNS yes #查询dns

						#UseDNS no  #查询dns关闭，加速登陆进入



						3.应用安全

						此项让经验来做或者更好

						#chkconfig --list | grep on  #查看开机启动的服务，并筛选出不需要不适用多余的应用程序；

						#根据top、htop、nethogs等工具来判断程序的可用性，一般新系统是不需要怎么优化的，但不妨试试能否优化；



						4.漏洞扫描

						在服务器基础优化结束后；对系统进行全面的漏洞扫描，并修复;

						推荐使用nmap工具来扫描系统并加强防护;

						漏洞扫描（Nmap）

						安装nmap后(Centos 系列 yum install -y nmap )，运行下列命令即可

						nmap -p0-65535 服务器Ip地址


						常用的扫描类型：

						1、-sP(ping的方式扫描，检查主机在线与否，不发送任何报文到目的主机,想知道目标主机是否运行，而不想进行其它扫描，这扫描方式很常用)
						2、-sL（仅仅列网段内出主机的状态、端口等信息，查询端口的话用 -p port,port1……）
						3、 -PS/PA/PU [portlist]						
						（根据给定的端口用TCP或UDP报文探测：对于root用户，这个选项让nmap使用SYN包而不是ACK包来对目标主机进行扫描。如果主机正在运行就返回一个RST包(或者一个SYNACK包)）
						4、-sS(TCP同步扫描(TCP SYN)：发出一个TCP同步包(SYN)，然后等待回对方应)
						5、 -sF -sF -sN（秘密FIN数据包扫描、圣诞树 (Xmas Tree)、空(Null)扫描模式使用-sF、-sX或者-sN扫描显示所有的端口都是关闭的，而使用SYN扫 描显示有打开的端口，你可以确定目标主机可能运行的是Windwos系统）
						6、-sU（UDP扫描：nmap首先向目标主机的每个端口发出一个0字节的UDP包，如果我们收到端口不可达的ICMP消息，端口就是关闭的，否则我们就假设它是打开的）
						7、-P0 (No ping)（这个选项跳过Nmap扫描）
						8、-PE/PP/PM

						扫描类型的控制

						1、sW （对滑动窗口的扫描）
						2、-sR（RPC扫描）
						3、 -PE; -PP; -PM (ICMP 类型的ping)
						4、-PR (ARP 类型的ping-n (无 DNS 解析)
						5、-R (为所有的目标做DNS解析)
						6、-sV(对服务版本的检测)
						常用的对主机的操作
						1、-A或者-O(对操作系统的检测)
						2、-v(增加信息的详尽程度)
						3、-p（ports的范围）


						推荐使用实例：

						nmap -O -p 0-65535 -v IP地址  （扫描整个服务器端口）





				一、服务搭建安装

					server

					上传安装包：

						1.	jdk-8u151-linux-x64.tar   		#java环境
						2.	apache-tomcat-7.0.82.tar.gz     #tomcat中间间
						3.	dubbo-admin-2.5.4.war	  		#dubbo管理平台
						4.	zookeeper-3.4.10.tar      		#zookeeper分发器
						5.	pcre-8.37.tar             		#此包的功能是支持地址重写rewrite功能
						6.	nginx-1.8.0.tar           		#nginx Web服务器
						7.	libmcrypt-2.5.8.tar       		#安装加密算法扩展库
						8.	php-5.6.13.tar     		  		#PHP程序处理工具（FastCGI）
						9.	redis-4.0.6.tar           		#Redis nosql程序
						10.	safe-rm-0.12.tar          		#防止误删除工具
						11. 						  		#busybox工具
				





				1.java环境JDK

						tar -zxf jdk-8u151-linux-x64.tar -C /usr/local/
						echo "
						export JAVA_HOME=/usr/local/jdk1.8.0_151                 
						export JAVA_BIN=/usr/local/jdk1.8.0_151/bin
						export PATH=${JAVA_HOME}bin:$PATH
						export CLASSPATH=.:${JAVA_HOME}/lib/dt.jar:${JAVA_HOME}/lib/tools.jar" >> /etc/profile

						source /etc/profile

						java -version	查看JDK版本



				2.tomcat安装（二进制安装）

						tar -zxf apache-tomcat-7.0.82.tar.gz -C /usr/local/ ; ln -sv apache-tomcat-7.0.82 tomcat7
						./usr/local/tomcat7/bin/start.sh



				3.安装dubbo
	
						把war包放入tomcat/webapps/ROOT/文件夹下即可
						rm -rf /usr/local/tomcat7/webapps/ROOT/* ; mv dubbo-admin-2.5.4.war /usr/local/tomcat7/webapps/ROOT/ ; 	./usr/local/tomcat7/bin/shutdown.sh ;./usr/local/tomcat7/bin/start.sh



				4.安装zookeeper调度服务

						zookeeper是hadoop的分布式调度服务，用于分发调度服务的使用并结合dubbo来实现平台管理调度分发功能


						单机安装、配置    


						1、下载zookeeper二进制安装包
						http://apache.fayea.com/zookeeper
						http://mirrors.hust.edu.cn/apache/zookeeper



						2.解压zookeeper安装包

						把zookeeper-3.4.3.tar.gz文件存放在/home/hadoop目录下，进行解压：
						tar -zxvf zookeeper-3.4.3.tar.gz
						chown -R hadoop:hadoop zookeeper-3.4.3



						3.设置环境变量

						在/etc/profile，/home/hadoop/.bashrc文件中添加如下红色信息  这句话原文有点问题 我使用来看就是 vi /etc/profile
						#set java environment
						ZOOKEEPER_HOME=/home/hadoop/zookeeper-3.4.3
						MAHOUT_HOME=/home/hadoop/mahout-distribution-0.7
						PIG_HOME=/home/hadoop/pig-0.9.2
						HBASE_HOME=/home/hadoop/hbase-0.94.3
						HIVE_HOME=/home/hadoop/hive-0.9.0
						HADOOP_HOME=/home/hadoop/hadoop-1.1.1
						JAVA_HOME=/home/hadoop/jdk1.7.0
						PATH=$JAVA_HOME/bin:$ZOOKEEPER_HOME/bin:$PIG_HOME/bin:$MAHOUT_HOME/bin:$HBASE_HOME/bin:$HIVE_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/conf:$PATH
						CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$ZOOKEEPER_HOME/lib:$HBASE_HOME/lib:$MAHOUT_HOME/lib:$PIG_HOME/lib:$HIVE_HOME/lib:$JAVA_HOME/lib/tools.jar
						export ZOOKEEPER_HOME
						export MAHOUT_HOME
						export PIG_HOME
						export HBASE_HOME
						export HADOOP_HOME
						export JAVA_HOME
						export HIVE_HOME
						export PATH
						export CLASSPATH


						
						4.配置

						配置文件存放在$ZOOKEEPER_HOME/conf/目录下，将zoo_sample.cfd文件名称改为zoo.cfg,  缺省的配置内容如下： 下面这篇 需要注意的是不能有注释 不然 data后面 新建文件夹就会带上注释 导致zookeeper服务起不来 （底部我会介绍排错过程）



						# The number of milliseconds of each tick
						tickTime=2000
						# The number of ticks that the initial
						# synchronization phase can take
						initLimit=10
						# The number of ticks that can pass between
						# sending a request and getting an acknowledgement
						syncLimit=5
						# the directory where the snapshot is stored.
						# do not use /tmp for storage, /tmp here is just
						# example sakes.
						dataDir=/home/hadoop/zookeeper-3.4.3/data
						# the port at which the clients will connect
						clientPort=2181
						#
						# Be sure to read the maintenance section of the
						# administrator guide before turning on autopurge.
						#
						# http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance
						#
						# The number of snapshots to retain in dataDir
						#autopurge.snapRetainCount=3
						# Purge task interval in hours
						# Set to "0" to disable auto purge feature
						#autopurge.purgeInterval=1


						
						注意点：
						dataDir=/home/hadoop/zookeeper-3.4.3/data后面不能有空格其次是 后面不能跟注释 不然创建的文件夹名字是 data#注释
						配置说明：
						tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。
						dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。
						clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。


						



				5.启动zookeeper

						当这些配置项配置好后，你现在就可以启动zookeeper了：

						hadoop@ubuntu:~/ netstat -at|grep 2181 #查看zookeeper端口
						hadoop@ubuntu:~/ netstat -nat #查看端口信息
						hadoop@ubuntu:~/zookeeper-3.4.3/bin$ ./zkServer.sh start #启动
						hadoop@ubuntu:~/zookeeper-3.4.3/bin$ jps #查看启动的服务名称
						hadoop@ubuntu:~/zookeeper-3.4.3/bin$ ./zkServer.sh stop #关闭zkServer.sh start-foreground 查看日志
						启动后要检查 Zookeeper 是否已经在服务，可以通过 netstat -at|grep 2181 命令查看是否有 clientPort 端口号在监听服务。




				6.pcre包安装 此功能是支持地址重写rewrite功能


						解压即可：	tar xf pcre-8.37.tar.bz2 -C /usr/local/src/



				
				7.nginx安装

						web服务器用于做反向代理面向对象的程序

						编译安装Nginx
						
						       如果我们在安装了开发工具之后，那么像gcc，gcc-c++，autoconf，automake 这些工具都会默认安装，如果没有安装开发工具（如最小安装的系统），那么这些东西我们必须手动安装
						解决依赖
						
						建议在编译之前，把开发包组安装："Development Tools"和 "Development Libraries"
						
						yum groupinstall "Development Tools" "Development Libraries" -y
						
						[root@XueGod63 ~]# yum install gcc gcc-c++ autoconf automake zlib zlib-devel openssl openssl-devel pcre* pcre-devel  -y
						
						Zlib：Nginx提供gzip模块，需要zlib的支持
						
						Openssl：Nginx提供SSL的功能
						
						root@XueGod63 ~]# tar xf pcre-8.37.tar.bz2 -C /usr/local/src/          //解压此安装包即可，不需要安装，Nginx需要指定pcre的源码不是安装后的路径，此包的功能是支持地址重写rewrite功能  

						pcre的依赖可以yum安装pcre和pcre-devel解决！

						解压编译安装
						
						tar xvf nginx-1.8.0.tar.gz -C /usr/local/src/ ; cd /usr/local/src/nginx-1.8.0
						
						./configure --prefix=/usr/local/nginx --with-http_dav_module --with-http_stub_status_module --with-http_addition_module --with-http_sub_module --with-http_flv_module --with-http_mp4_module --with-pcre=/usr/local/src/pcre-8.37

						*****************************************************************************************************************
						--with-http_dav_module                  #启用支持（增加PUT,DELETE,MKCOL：创建集合，COPY和MOVE方法）
						                                    默认关闭，需要编译开启
						--with-http_stub_status_module    #启用支持（获取Nginx上次启动以来的工作状态）
						--with-http_addition_module         #启用支持（作为一个输出过滤器，支持不完全缓冲，分部分相应请求）
						--with-http_sub_module                 #启用支持（允许一些其他文本替换Nginx相应中的一些文本）
						--with-http_flv_module                   #启用支持（提供支持flv视频文件支持）
						--with-http_mp4_module                      #启用支持（提供支持mp4视频文件支持，提供伪流媒体服务端支持）
						--with-pcre=/usr/local/src/pcre-8.37   #需要注意，这里指的是源码,用#./configure --help |grep pcre查看帮助


						make –j 3 ; make install ; cd

						useradd -M -u 8001 -s /sbin/nologin nginx               //用于运行Nginx的用户


						Nginx目录结构
						ll /usr/local/nginx/
						drwxr-xr-x 2 root root 4096 Sep 1513:44 conf           #Nginx相关配置文件
						drwxr-xr-x 2 root root 4096 Sep 1513:44 html           #网站根目录
						drwxr-xr-x 2 root root 4096 Sep 1513:44 logs           #日志文件
						drwxr-xr-x 2 root root 4096 Sep 1513:44 sbin           #Nginx启动脚本

						配置Nginx支持php文件
						vim /usr/local/nginx/conf/nginx.conf                   //Nginx主配置文件
						#user  nobody;                 
						user nginx nginx;                   #添加此行
						……
						
						并在所支持的主页面格式中添加php格式的主页，类似如下：
						location / {
						            root   html;
						            index  index.php index.html index.htm;
						        }

						        #location ~ \.php$ {
						        #    root           html;
						        #    fastcgi_pass   127.0.0.1:9000;
						        #    fastcgi_index  index.php;
						        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
						        #    include        fastcgi_params;
						        #}                     
						        #找到上面这段内容，将这段内容复制，去掉#且修改为如下
						location ~ \.php$ {
						    root           html;
						    fastcgi_pass   127.0.0.1:9000;
						    fastcgi_index  index.php;
						    fastcgi_param  SCRIPT_FILENAME  $document_root$ $fastcgi_script_name;      #将scripts修改为nginx的html，即Nginx页面目录，因为要处理的php文件也在这个目录下
						    include        fastcgi_params;
						}

						启动Nginx、
						/usr/local/nginx/sbin/nginx
						netstat -tlnp | grep nginx
						tcp        0      00.0.0.0:80                  0.0.0.0:*                   LISTEN      7083/nginx         

						使用浏览器测试   http://服务器IP地址




				8.PHP程序安装


						编译安装PHP
						      
						在Nginx中，我们使用的是php-fpm来对php页面解析，PHP-FPM其实是PHP源代码的一个补丁，指在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，再编译安装PHP后才可以使用
						从PHP5.3.3开始，PHP中直接整合了PHP-FPM，所以从PHP5.3.3版本以后，不需要下载PHP-FPM补丁包了，下面是PHP-FPM官方发出来的通知：
						
						http://php-fpm.org/download
						

						解决依赖
						
						yum install php-pear -y                     
						
						//pear按照一定的分类来管理pear应用代码库，你的pear代码可以组织到其中适当的目录中，其他人可以方便的检索并分享到你的成果；pear不仅仅是一个代码仓库，它同时也是一个标准，使用这个标准来书写你的php代码，将会增强你的程序的可读性，复用性，减少出错的几率；Pear通过两个类为你搭建了一个框架，实现了诸如析构函数，错误捕获功能，你通过继承就可以使用这些功能
						PHP添加libmcrypt拓展

						libmcrypt加密算法扩展库，支持DES, 3DES, RIJNDAEL, Twofish, IDEA, GOST, CAST-256, ARCFOUR, SERPENT, SAFER+等算法
						
						       官方网站：http://mcrypt.hellug.gr/index.html  或者 http://mcrypt.sourceforge.net/
						
						       在页面上点击下图连接，可以下载最新的2.5.8版本（页面上有个Browse All Files→→Libmcrypt）

						1、安装加密算法扩展库
						tar xf libmcrypt-2.5.8.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/libmcrypt-2.5.8/
						./configure --prefix=/usr/local/libmcrypt ; make ; make install ; cd

						2、除开上面的依赖解决之外，还需要安装图片，xml，字体支持基本库，使用yum去安装，安装的时候，这些软件包自身也有依赖！

						yum install -y libxml2-devel libcurl-devel libjpeg-devel libpng-devel freetype freetype-devel libzip libzip-devel

						3、需要添加到库文件路径
						由于系统默认规定只在/lib、/lib64、/lib/lib64下面找库文件，所以我们需要手动添加进去。
						
						vim /etc/ld.so.conf
						
						include ld.so.conf.d/*.conf                    #此行原有
						/usr/local/libmcrypt/lib                       #此行添加
						/usr/local/mysql/lib                           #此行添加
						ldconfig
						echo 'ldconfig' >> /etc/rc.local
						
						编译安装php/et     
						
						tar xf php-5.6.13.tar.bz2 -C /usr/local/src/ ; cd /usr/local/src/php-5.6.13      
						
						./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --enable-mbregex  --enable-fpm --enable-mbstring --with-gd --enable-mysqlnd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-soap --with-gettext --with-mcrypt=/usr/local/libmcrypt  
						

						#若不加--with-gettext，安装 zabbix 会有一个 php gettext no fail 的错误
						*****************************************************************************************************************
						--with-config-file-path                         #设置 php.ini 的搜索路径。默认为 PREFIX/lib
						--with-mysql                        		#mysql安装目录，对mysql的支持
						--with-mysqli                         		#mysqli扩展技术不仅可以调用MySQL的存储过程、处理MySQL事务，而且还可以使访问数据库工作变得更加稳定。是一个数据库驱动
						--with-iconv-dir                     		#种字符集间的转换
						--with-freetype-dir                  		#打开对freetype字体库的支持
						--with-jpeg-dir                      		#打开对jpeg图片的支持
						--with-png-dir                         		#打开对png图片的支持
						--with-zlib                        			#打开zlib库的支持,实现GZIP压缩输出     
						--with-libxml-dir=/usr                    	#打开libxml2库的支持,libxml是一个用来解析XML文档的函数库
						--enable-xml                       			#支持xml文档
						--disable-rpath                         	#关闭额外的运行库文件
						--enable-bcmath                      		#打开图片大小调整,用到zabbix监控的时候用到了这个模块
						--enable-shmop                       		#shmop共享内存操作函数，可以与c/c++通讯
						--enable-sysvsem  							#加上上面shmop，这样就使得你的PHP系统可以处理相关的IPC函数（活动在内核级别）。
						--enable-inline-optimization    		    #优化线程
						--with-curl                           		#打开curl浏览工具的支持 
						--with-curlwrappers                         #运用curl工具打开url流 ，新版PHP5.6已弃用
						--enable-mbregex                   		    #支持多字节正则表达式
						--enable-fpm                       			#CGI方式安装的启动程序，PHP-FPM服务
						--enable-mbstring                           #多字节，字符串的支持
						--with-gd                            		#打开gd库的支持，是php处理图形的扩展库，GD库提供了一系列用来处理图片的API，使用GD库可以处理图片，或者生成图片。
						--enable-gd-native-ttf                      #支持TrueType字符串函数库
						--with-openssl                              #打开ssl支持
						--with-mhash                                #支持mhash算法扩展
						--enable-pcntl                              #freeTDS需要用到的，pcntl扩展可以支持php的多线程操作
						--enable-sockets                            #打开 sockets 支持
						--with-xmlrpc                               #打开xml-rpc的c语言
						--enable-zip                                #打开对zip的支持
						--enable-soap                               #扩展库通过soap协议实现了客服端与服务器端的数据交互操作
						--with-mcrypt                               #mcrypt算法扩展
						--with-zlib-dir=/usr/local/libzip           #指定zip库路径



						此步骤如果出错：
						谷歌找的答案
						Linux系统中，编译php 的时候，在configure配置的时候，出现“configure: error: Don’t know how to define struct flock on this system, set –enable-opcache=no”这样的错误。但是又需要opcache 扩展，有两种方法可以解决此问题：
						1：

						vim /etc/ld.so.conf.d/local.conf     # 编辑库文件
						/usr/local/lib                       # 添加该行
						:wq                                  # 保存退出
						ldconfig -v                          # 使之生效

						2：如果这种方法不行，那就是指定mysql路径错误，方法如下：

						vim  /etc/ld.so.conf.d/mysql-x86_64.conf   #编辑改文件
						/usr/local/mysql/lib                       #添加该行 此内容是mysql的安装目录
						:wq                                        #保存退出
						ldconfig -v                                #使之生效


											
						make -j 3 && make install ; cd


						配置php和php-fpm
						
						PHP配置文件：
						       cp /usr/local/src/php-5.6.13/php.ini-production /usr/local/php/php.ini
						
						PHP-FPM配置文件：
						       cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
						
						修改 /usr/local/php/etc/php-fpm.conf 运-j行用户和组改为nginx
						
						PHP-FPM启动脚本
						       cp /usr/local/src/php-5.6.13/sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm
						       chmod +x /etc/init.d/php-fpm

						chkconfig php-fpm on
						/etc/init.d/php-fpm start




				9.redis服务安装


						安装下载，解压，编译:

						$ wget http://download.redis.io/releases/redis-3.2.5.tar.gz
						$ tar xzf redis-3.2.5.tar.gz
						$ cd redis-3.2.5
						$ make

						二进制文件是编译完成后在src目录下，通过下面的命令启动Redis服务：
						$ src/redis-server

						你可以使用内置的客户端命令redis-cli进行使用：
						$ src/redis-cli
						redis> set foo bar
						OK
						redis> get foo
						"bar"

						# vim /usr/local/redis/redis.conf
						
						daemonize yes          修改为yes

						src/redis-server redis.conf           启动时指配置文件

						把redis命添加到PATH中
						# vim /etc/profile                    在未行添加

						export PATH=$PATH:/usr/local/redis/src

						启动
						# redis-server /usr/local/redis/redis.conf          指定redis 配置文件

						停止
						# redis-cli shutdown                                执行redis-cli 加上shutdown

						如果端口改变需要加-p src/redis-cli -p 65379



						redis安全优化： 

						#禁止外网访问
							bind 127.0.0.1
						
						#修改默认端口
							Port 6379

						#加密码增加安全性
							requirepass 123456 






				10.安装安全工具（防止误删除）

						Linux下防止rm -rf /命令误删除

						1.下载到Linux服务器后并解压缩，复制safe-rm-0.12下的 safe-rm 命令到/usr/local/bin目录

						tar -zxf safe-rm-0.12.tar.gz -C /opt/
						cp /opt/safe-rm-0.12/safe-rm /usr/local/bin/

							注：我是解压缩到/opt/safe-rm-0.12目录下的。

						现在已经可以直接用safe-rm命令进行删除操作了，用法和参数和 rm 是一样的，不过还没有替换为 rm

						2、替换 safe-rm 为系统默认的 rm 命令
						做一个 rm 命令的符号链接，之后执行 rm 命令就相当于执行 safe-rm
						ln -s /usr/local/bin/safe-rm /usr/local/bin/rm

						设置环境变量，要保证/usr/local/bin在其他变量路径前面
						先查看当前变量的顺序，可以看到/usr/local/bin没有在其他路径的最前面：

						[root@localhost /]# echo $PATH
						/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin

						修改编辑配置文件/etc/profile，添加下面一行

						PATH=/usr/local/bin:$PATH

						保存后，重启整个服务器，使配置生效；重启后，用 rm 命令删除，就相当执行的 safe-rm 命令了。
						
						3、设置路径黑名单
						创建/etc/safe-rm.conf文件，将重要文件或者目录的完整路径输入进去保存就可以了，每条以回车分隔。

						[root@localhost /]# cat /etc/safe-rm.conf
						/opt/test
						/

						我这里加了2个路径，一个根目录，一个/opt/test目录。
						好了，到这里就完成了，执行 rm -rf / 和 rm -rf /opt/test 将不会删除其目录，会提示跳过删除（最好先找个测试目录进行实验，别弄不好成灾难了....）。
						总结：其实，只要用点心，仔细一些，误操作的几率还是比较少的；有句话说的好，刀可以杀猪，也可以杀人，关键在于拿刀的人...






											







































