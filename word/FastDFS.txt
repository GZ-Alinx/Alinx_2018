
	目录

	 1.认识FastDFS
	 2.安装FastDFS
	 3.安装FastDFS
	 3.安装nginx模块
	
	




	一、FastDFS介绍
	  	
	   1.什么是FastDFS
	  	
	    FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。
	
	   2.FastDFS架构
	
	        FastDFS架构包括Trackerserver和Storage server。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。
	
	        Trackerserver作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将tracker称为追踪服务器或调度服务器。
	
	        Storageserver作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。
	
	如图：
	
	
	
    	   3.Tracker集群 
	
	        FastDFS集群中的Trackerserver可以有多台，Tracker server之间是相互平等关系同时提供服务，Tracker server不存在单点故障。客户端请求Tracker server采用轮询方式，如果请求的tracker无法提供服务则换另一个tracker。
	    
	
	   4.Storage集群
	
	        Storage集群采用了分组存储方式。storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，组内的Storage server之间是平等关系，不同组的Storage server之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。一个组的存储容量为该组内存储服务器容量最小的那个，由此可见组内存储服务器的软硬件配置最好是一致的。
	        采用分组存储方式的好处是灵活、可控性较强。比如上传文件时，可以由客户端直接指定上传到的组也可以由tracker进行调度选择。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力（纵向扩容）。当系统容量不足时，可以增加组来扩充存储容量（横向扩容）。
	
	   5.Storage状态收集
	
	        Storage server会连接集群中所有的Tracker server，定时向他们报告自己的状态，包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。
	
 	   6.文件上传流程
	    
	        文字描述：  Clinet 上传文件到tracker，tracker查询可用的storage并返回storage的端口和IP地址，Client收到地址和端口后上传文件到storage（生成file_id）,然后写入到硬盘，然后返回路径信息和文件名给到client，client记录文件信息
	
	    如图：     客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。
	        组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。
	
	        虚拟磁盘路径：storage配置的虚拟路径，与磁盘选项store_path*对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。
	
	        数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。
	
	        文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。
	
	
	   7.文件下载流程
	        
	        如图：无图了
	        
	
	       tracker根据请求的文件路径即文件ID来快速定义文件。
	       FastDFS+Nginx实现文件服务器
	    
	
	1.1 架构图
	    ...null...
	
	1.2 架构描述
	出于高可用的需求tracker和storage都使用两台服务器，storage使用两个组用以说明storage可以任意扩充组实现线性扩展。
	
	
	
	1.3 client
	client请求tracker进行文件上传、下载、删除。
	client可以通过java client API方式进行文件上传、下载、删除。
	client可以通过http方式进行文件下载。tracker通过nginx提供http下载接口。
	client也可以直接访问storage进行文件上传、下载、删除，但建议client通过tracker进行文件上传、下载、删除。
	
	
	1.3.1 Tracker Server
	每个tracker server互相平等，tracker server上部署nginx是为了对外提供http文件下载接口，tracker上nginx只是起到负载均衡的作用。tracker的nginx会代理转发至storage上的nginx。
	tracker上的两个nginx可以采用主备方式实现高可用。nginx高可用参数nginx文档。
	1.3.2 Storage Server
	每台storage上也部署nginx，storage上的nginx与tracker上的nginx有区别，storage上的nginx需要安装FastDSF-nginx模块，此模块的作用是使用FastDFS和nginx进行整合，nginx对外提供http文件下载接口，注意：nginx只提供文件下载接口不提供上传接口。文件上传仍然通过java client API进行。
	
	FastDFS--tracker安装
	           
	        系统环境：CentOS Linux release 7.2.1511 (Core)
	        内核：Linux server 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
	
	
	1.1下载
	
	tracker和storage使用相同的安装包，下载地址：
	http://sourceforge.net/projects/FastDFS/
	
	https://github.com/happyfish100/FastDFS（推荐）
	
	FastDFS_v5.08.tar.gz
	
	1.2 依赖包环境与工具安装
	
	yum install vim wget zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl net-tools unzip -y
	     
	
	2.1    下载安装 libfastcommon
	
	    wget https://github.com/happyfish100/libfastcommon/archive/V1.0.7.tar.gz
	
	#tar -zxvf V1.0.7.tar.gz
	
	#./make.sh
	
	
	#./make.sh install
	
	
	2.2    下载安装FastDFS
	
	wget https://github.com/happyfish100/fastdfs/archive/V5.05.tar.gz
	
	
	#tar -zxf FastDFS_v5.08.tar.gz
	
	#cd FastDFS
	#./make.sh
	
	#./make.sh install
	
	#显示这样就成功了
	
	
	
	
	
	
	
	
	3.服务配置
	
	
	    3.1 配置 Tracker 服务
	
	    
	    #cp tracker.conf.sample tracker.conf
	    #vim /etc/fdfs/tracker.conf   #修改
	        base_path=/data/fastdfs
	        http.server_port=80
	    当然前提是你要有或先创建了/data/fastdfs目录。port=22122这个端口参数不建议修改，除非你已经占用它了。
	    修改完成保存并退出 vim ，这时候我们可以使用/usr/bin/fdfs_trackerd /etc/dffs/tracker.conf start来启动 Tracker服务
	
	
	
	
	看到22122端口正常被监听后，这时候就算 Tracker服务安装成功啦！
	
	
	3.2配置 Storage 服务
	
	现在开始配置 Storage 服务，由于我这是单机器测试，你把 Storage 服务放在多台服务器也是可以的，它有 Group(组)的概念，同一组内服务器互备同步，这里不再演示。直接开始配置，依然是进入/etcfs的目录操作，首先进入它。会看到三个.sample后缀的文件，我们需要把其中的storage.conf.sample文件改为storage.conf配置文件并修改它。
	
	cp storage.conf.sample storage.conf
	vim storage.conf
	    base_path=/data/fastdfs/storage
	    tracker_server=你的IP地址:22122            注意：端口一定要放通 否则报错
	
	当然你的/data/fastdfs目录下要有storage文件夹，没有就创建一个，不然会报错的，日志以及文件都会在这个下面，启动时候会自动生成许多文件夹。stroage的port=23000这个端口参数也不建议修改，默认就好，除非你已经占用它了。
	
	启动Storage
	
	
	
	
	监视一下：
	
	/usr/bin/fdfs_monitor /etc/fdfs/storage.conf
	
	
	看到我红线处ACTIVE这样就 ok 啦！
	
	
	总结一下
	
	        这篇文章只是进行了 FastDFS 的安装与配置，没有任何难度可言，只要按照步骤一步步走下去就可以搞定。可能中间过程中我们会由于不细心经历各种错误，只要仔细看日志信息都能解决掉的，你解决掉一个个错误的时候难道没有披荆斩棘战士般的感觉么？反正我没遇到错...
	1、安装 Nginx 和 fastdfs-nginx-module 上传测试
	      
	
	      1.1安装 Nginx 以及结合 fastdfs-nginx-module 模块使用。
	    
	
	        wget -c https://nginx.org/download/nginx-1.10.1.tar.gz
	        wget https://github.com/happyfish100/fastdfs-nginx-module/archive/master.zip
	
	
	        #unzip master.zip
	
	
	         #./configure --add-module=../fastdfs-nginx-module-master/src/
	 
	         1.修改模块config文件路径对接到真实的fdfs
	[root@localhost FastDFS]# vim fastdfs-nginx-module/src/config
	原来的：
	
	改为：
	         
	2.讲所有的FastDFS/tracker/.h结尾的所有头文件导入/usr/local/include/fastdfs中
	         #find -name *.h -exec cp {} /usr/local/include/fastdfs \;
	
	         这里报错需要注意
	
	
	         然后就可以继续编译了
	
	         #./configure --add-module=../fastdfs-nginx-module-master/src/
	
	
	报错1：  没有找到文件，路径没有指对！
	
	
	
	
	报错2：
	
	    对接好浏览器 并无启动报错 ，，但访问不了~
	
	
	   查看nginx/logs目录下的错误日志文件。。。排查。
	
	最后做了这几不步操作：
	
	      cp ~/app/FastDFS/FastDFS/conf/mime.types /etc/fdfs/
	    cp /root/app/FastDFS/FastDFS/conf/http.conf /etc/fdfs/
	      cp /root/app/FastDFS/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/
	
	  坑爹哦   。。。。还是ln帮忙解决
	
	
	
	1.2配置mod-fastdfs.conf，并拷贝到/etc/fdfs文件目录下。
	
	         cd /software/fastdfs-nginx-module-master/src/
	         vim mod_fastdfs.conf
	         cp mod_fastdfs.conf /etc/fdfs
	
	修改mod-fastdfs.conf配置只需要修改我标注的这三个地方就行了，其他不需要也不建议改变
	
	     
	         tracker_server=192.168.198.129:22122
	         url_have_group_name = true
	         store_path0=/data/fastdfs/storage
	
	
	         cd fastdfs-5.05/conf
	         cp anti-steal.jpg http.conf mime.types /etcfs/
	
	1.3配置 Nginx。编辑nginx.conf文件：
	
	         cd /usr/local/nginx/conf
	         vi nginx.conf
	
	location /group1/M00 {
	    root /data/fastdfs/storage/;
	    ngx_fastdfs_module;
	}
	
	
	由于我们配置了group1/M00的访问，我们需要建立一个group1文件夹，并建立M00到data的软链接。
	
	         #mkdir /data/fastdfs/storage/data/group1
	         #ln -s /data/fastdfs/storage/data /data/fastdfs/storage/data/group1/M00       
	
	
	启动nginx
	
	         /usr/local/nginx/sbin/ngInx 
	
	cd /usr/bin
	vim test.txt
	    
	    888888888888888888888888888
	
	fdfs_test /etcfs/client.conf upload a.txt
	
	
	http://192.168.100.49/group1/M00/00/00/rBIXwVpPFsWAVftcAABdrZgsqUU873_big.jpg
	
